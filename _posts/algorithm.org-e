#+TITLE: 算法和数据结构学习
#+DATE: <2016-09-08 19:55>
#+KEYWORDS: algorithm, data structure
#+AUTHOR: levin
#+EMAIL: loneavon1@gmail.com

* 算法
** 算法基本思想
枚举: 一个集的枚举是列出某些有穷序列集的所有成员的程序，或者是一种特定类型对象的计数。这两种类型经常（但不总是）重叠。
递归: 一种通过重复将问题分解为同类的子问题而解决问题的方法
分治: 基于递归算法, 一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。
广义之下，所有使用递归或循环的算法均被视作“分治算法”。因此，有些作者考虑“分治法”这个名称应只用于每个有最少两个子问题的算法。而只有一个子问题的曾被建议使用减治法这个名称。
动态规划: 要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解
贪心: 在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法
贪心算法在有最优子结构的问题中尤为有效。最优子结构的意思是局部最优解能决定全局最优解。简单地说，问题能够分解成子问题来解决，子问题的最优解能递推到最终问题的最优解
贪心算法与动态规划的不同在于它每对每个子问题的解决方案都做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能

总结:
1. 将复杂问题拆解为简单可重复问题
** 算法详解
*** 排序算法
**** 快速排序(快排)
算法描述:
1. 选取待排序列表中某个元素作为 key，记录列表起始 & 终止点为左指针 & 右指针
2. 从左至右遍历列表，遇到大于或者等于 key 时获取新的左指针 & 小于或者等 key 时获取新的右指针，交换左右指针的数据
3. 左指针位置小于右指针位置时，重复以上过程，终止时交换起始位置元素和最终左指针的元素
4. 将 key 两边的子列表重复以上 3 个过程(递归)
核心代码实现:
Python 版本
def quick_sort(sort_list, start, end):
    if(start >= end):
        return sort_list

    left_point = start
    right_point = end
    key = sort_list[start]

    print "start: %s" % start
    print "end: %s" % end

    while(left_point < right_point):
        while(sort_list[left_point] <= key and left_point < right_point):
            left_point = left_point + 1
        while(sort_list[right_point] >= key and left_point < right_point):
            right_point = right_point - 1

        sort_list[left_point], sort_list[right_point] = sort_list[right_point], sort_list[left_point]

    sort_list[left_point], sort_list[start] = sort_list[start], sort_list[left_point]

    if(start < (left_point - 1)):
        quick_sort(sort_list, start, left_point - 1)
    if((left_point + 1) < end):
        quick_sort(sort_list, left_point + 1, end)
*** 其他算法
**** 求最大公约数
Q: 给出 X & Y 两数，求他们的最大公约数
A: 欧几里德算法又称辗转相除法，用于计算两个整数a,b的最大公约数。其计算原理依赖于下面的定理：

定理：gcd(a,b) = gcd(b,a mod b)

证明：a可以表示成a = kb + r，则r = a mod b 
假设d是a,b的一个公约数，则有 
d|a, d|b，而r = a - kb，因此d|r 
因此d是(b,a mod b)的公约数

假设d 是(b,a mod b)的公约数，则 
d | b , d |r ，但是a = kb +r 
因此d也是(a,b)的公约数
因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，得证
** 常用数据结构
*** 链表
**** 单链表转置
详解:
0步: 1 -> 2 -> 3 -> 4
1步: 2 -> 1 -> 3 -> 4
2步: 3 -> 2 -> 1 -> 4
3步: 4 -> 3 -> 2 -> 1

步骤拆解:
1. 将待转置元素从原链表删除
2. 将转置元素插入到头结点之前

代码实现(Python):
# 循环代码实现
def reserve_by_loop(List):
    if(List == None && List.next == None):
        return List

    head = List # 记录链表当前的头结点
    cur = None # 待转置元素
    pre = List # 原链表头结点
    while(pre.next != None):
        cur = pre.next
	pre.next = cur.next
	cur.next = head
	head = cur

	return head
