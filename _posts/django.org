#+TITLE: Django 实用操作
#+DATE: <2016-09-08 20:07>
#+TAGS: django
#+COMMENTS: yes


*** 同步已有数据库生成 models
python manage.py inspectdb --database '{db_name}'
#+BEGIN_HTML
<!-- more -->
#+END_HTML
*** 多数据库访问利器 db router
Django 在多数据库下提供了 db router 来控制请求的读、写、relation、migrate
For example:(各个方法策略均可以自己实现，具体请参考：https://docs.djangoproject.com/es/1.9/topics/db/multi-db/#using-routers )
#+BEGIN_SRC python
class DbRouter(object):
    def db_for_read(self, model, **hints):
        if hasattr(model, '_database'):
            return model._database
        return 'default'

    def db_for_write(self, model, **hints):
        if hasattr(model, '_database'):
            return model._database
        return  'default'

    def allow_relation(self, obj1, obj2, **hints):
        return None

    def allow_syncdb(self, db, model):
        if hasattr(model, '_database'):
            model_db = model._database
        else:
            model_db = 'default'
        if db == model_db:
            return True
        else:
            return False

    def allow_migrate(self, db, model):
        return None
#+END_SRC
1. 在每个 models 文件的 Class 中添加 _database 指定数据库，数据库名要与 setting 中保持一致
2. 在 setting 中添加 db router 设置: DATABASE_ROUTERS = ['bdg.db_router.DbRouter']
*** 自定义 template 标签 & 过滤器
Django 提供自定义 template 标签 & 过滤器的功能, 用来丰富自带的 template
+ 在 template 同级目录下创建 templatetags 目录（在此目录下记得创建 __init__.py, 标示此目录下 py 文件为可引用模块)
+ 在 templatetags 目录下创建自定义标签 or 过滤器模块文件
For example:（具体请参见: https://docs.djangoproject.com/en/1.9/howto/custom-template-tags/ ）
#+BEGIN_SRC python
import datetime
from django import template

register = template.Library()

@register.simple_tag
def current_time(format_string):
    return datetime.datetime.now().strftime(format_string)

@register.filter(name='cut')
def cut(value, arg):
    return value.replace(arg, '')
#+END_SRC
在模板文件(html 文件)中引用对应的自定义标签或者过滤器: load 'module_name' 
*** 定制 django 管理命令(commands)
Django 提供机制来使用户定义自己的管理命令
+ 在 app 目录下创建 management/commands 目录, 此目录下的模块(py 文件)将会在 manage.py 中注册为可用命令(除去以下划线开头的模块)
+ 假定现在需要完成 close.py 命令, 具体编写实例见下:
#+BEGIN_SRC python
from django.core.management.base import BaseCommand, CommandError
from polls.models import Poll

class Command(BaseCommand):
    help = 'Closes the specified poll for voting'

    def add_arguments(self, parser):
        parser.add_argument('poll_id', nargs='+', type=int)

    def handle(self, *args, **options):
        for poll_id in options['poll_id']:
            try:
                poll = Poll.objects.get(pk=poll_id)
            except Poll.DoesNotExist:
                raise CommandError('Poll "%s" does not exist' % poll_id)

            poll.opened = False
            poll.save()

            self.stdout.write(self.style.SUCCESS('Successfully closed poll "%s"' % poll_
#+END_SRC
+ add_arguments 调用 parser.add_argument (Django 1.8 后使用 argparser 解析参数，将解析后的参数传递给 options) 解析命令行参数, add_argument 具体参数配置请参见:https://docs.python.org/3/library/argparse.html#module-argparse
+ handle 为实际执行的方法，通过 options 获取命令行参数
+ 命令行调试时可使用 self.stdout & self.stderr 将内容输出到控制终端
+ 命令行执行时使用 python manage.py {module name without '.py'}
更详细内容请参见:
中文教程(http://python.usyiyi.cn/django/howto/custom-management-commands.html)
英文教程(https://docs.djangoproject.com/en/1.9/howto/custom-management-commands/)
*** Django models 数据库记录批量导入 
django models 对象提供批量将数据导入数据的方法 bulk_create()
eg: 若 model 类名为 bdgop, 插入方法为 bdgop.objects.bulk_create(records)
records 为列表, 列表格式为 records.append(bdgop(name='liwen'))
*** 通过 models 访问数据库
+ 访问数据库返回异常: OperationalError: (1054, "Unknown column 'table_graph_info.id' in 'field list'")
访问特定表会报此错, 同一数据库中部分表报此错, 怀疑是表结构历史有变更, 但未找到原因也未找到解决办法, 目前通过原生 raw 绕过
*** django 转义 autoescape
将传递给 html 前端的字符保持, 不做转义, 现在还不是特别清楚, 但是太牛逼了, 后面再详细了解
